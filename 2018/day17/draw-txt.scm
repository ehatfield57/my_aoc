(require racket/gui)

(define (load-txt filename)
  (let ((ground (make-hash))
        (input (open-input-file filename))
        (x 0) (y 0))
    (let loop ((ch (read-char input)))
     (case ch
       ((#\#) (hash-set! ground (cons x y) #\#))
       ((#\|) (hash-set! ground (cons x y) #\|))
       ((#\~) (hash-set! ground (cons x y) #\~))
       ((#\newline)
        (set! y (add1 y)) 
        (set! x -1)))
     (set! x (add1 x)) 
     (set! ch (read-char input))
     (when (not (eof-object? ch)) (loop ch)))
    (close-input-port input)
    ground))

(define (draw-scan ground)
  (let ((min-x (apply min (map car (hash-keys ground))))
        (min-y (apply min (map cdr (hash-keys ground))))
        (max-x (apply max (map car (hash-keys ground))))
        (max-y (apply max (map cdr (hash-keys ground)))))
    (for ((y (range min-y (add1 max-y))))
         (for ((x (range (sub1 min-x) (+ 2 max-x))))
              (if (hash-has-key? ground (cons x y))
                  (printf (string (hash-ref ground (cons x y))))
                  (printf ".")))
         (printf "~n"))
    (printf "~n")))

(define (draw-ground ground)
  (let* ((points (hash-keys ground))
         (min-x (apply min (map car points)))
         (max-x (apply max (map car points)))
         (min-y (apply min (map cdr points)))
         (max-y (apply max (map cdr points)))
         (ground-width (max 50 (- max-x min-x)))
         (ground-height (max 50 (- max-y min-y))))

    (define my-frame (new frame% (label "Reservoir") (width ground-width) (height ground-height)))

    (define my-canvas (new canvas%
                           (parent my-frame)
                           (paint-callback
                             (lambda (canvas dc)
                               (let ((black-pen (new pen% (color "black")))
                                     (blue-pen (new pen% (color "blue"))))
                                 (for ((point points))
                                      (let ((x (car point))
                                            (y (cdr point)))
                                        (send dc set-pen (if (string=? "#" (string (hash-ref ground point))) black-pen blue-pen))
                                        (send dc draw-point (add1 (- x min-x)) (add1 (- y min-y))))))))))
    (send my-frame show #t)))

(draw-ground (load-txt "scan.txt"))
(draw-ground (load-txt "output.txt"))

