Apologies for any confusion in my previous response. Let's refine the solution to ensure that it **directly outputs the BOOST keycode** when you run the program. Additionally, we'll adjust the file names as per your request:

- **Data File:** `day09-data.txt`
- **Program File:** `day09.exs`

## Updated Elixir Solution

Below is the updated Elixir code tailored to your specifications. This script will:

1. **Read the Intcode program** from `day09-data.txt`.
2. **Execute the Intcode program** with an input value of `1`.
3. **Print the BOOST keycode** output by the program.

### 1. Create the Data File: `day09-data.txt`

Ensure you have your Intcode program saved in a file named `day09-data.txt`. This file should contain a single line of comma-separated integers. For example:

```
109,1,204,-1,1001,100,1,100,1008,100,16,101,1006,101,0,99
```

*Replace the above example with your actual Intcode program.*

### 2. Create the Program File: `day09.exs`

Save the following Elixir code in a file named `day09.exs`:

```elixir
defmodule Intcode do
  defstruct memory: %{}, pointer: 0, relative_base: 0, inputs: [], outputs: []

  @opcode_params %{
    1 => 3,
    2 => 3,
    3 => 1,
    4 => 1,
    5 => 2,
    6 => 2,
    7 => 3,
    8 => 3,
    9 => 1,
    99 => 0
  }

  def run(program, inputs \\ []) do
    memory = parse_program(program)
    initial_state = %Intcode{memory: memory, inputs: inputs}
    execute(initial_state)
  end

  defp parse_program(program) do
    program
    |> String.trim()
    |> String.split(",", trim: true)
    |> Enum.with_index()
    |> Enum.reduce(%{}, fn {value, index}, acc ->
      Map.put(acc, index, String.to_integer(value))
    end)
  end

  defp execute(state = %Intcode{pointer: pointer, memory: memory}) do
    {opcode, modes} = parse_instruction(Map.get(memory, pointer, 0))

    cond do
      opcode == 99 ->
        state.outputs

      true ->
        {state, new_pointer} = execute_opcode(state, opcode, modes)
        execute(%{state | pointer: new_pointer})
    end
  end

  defp parse_instruction(instruction) do
    opcode = rem(instruction, 100)
    modes = div(instruction, 100)
    {opcode, modes}
  end

  defp get_param(state, offset, mode) do
    val = Map.get(state.memory, state.pointer + offset, 0)

    case mode do
      0 -> Map.get(state.memory, val, 0) # Position mode
      1 -> val                          # Immediate mode
      2 -> Map.get(state.memory, state.relative_base + val, 0) # Relative mode
    end
  end

  defp get_write_address(state, offset, mode) do
    val = Map.get(state.memory, state.pointer + offset, 0)

    case mode do
      0 -> val
      2 -> state.relative_base + val
      _ -> raise "Invalid mode for write address: #{mode}"
    end
  end

  defp execute_opcode(state, opcode, modes) do
    params = @opcode_params[opcode]
    mode_list = for i <- 0..(params - 1), do: rem(div(modes, :math.pow(10, i) |> trunc), 10)

    case opcode do
      1 -> # Add
        param1 = get_param(state, 1, Enum.at(mode_list, 0))
        param2 = get_param(state, 2, Enum.at(mode_list, 1))
        addr = get_write_address(state, 3, Enum.at(mode_list, 2))
        new_memory = Map.put(state.memory, addr, param1 + param2)
        { %{state | memory: new_memory}, state.pointer + 4 }

      2 -> # Multiply
        param1 = get_param(state, 1, Enum.at(mode_list, 0))
        param2 = get_param(state, 2, Enum.at(mode_list, 1))
        addr = get_write_address(state, 3, Enum.at(mode_list, 2))
        new_memory = Map.put(state.memory, addr, param1 * param2)
        { %{state | memory: new_memory}, state.pointer + 4 }

      3 -> # Input
        case state.inputs do
          [input | rest] ->
            addr = get_write_address(state, 1, Enum.at(mode_list, 0))
            new_memory = Map.put(state.memory, addr, input)
            { %{state | memory: new_memory, inputs: rest }, state.pointer + 2 }

          [] ->
            raise "No input available for opcode 3"
        end

      4 -> # Output
        param = get_param(state, 1, Enum.at(mode_list, 0))
        new_outputs = state.outputs ++ [param]
        { %{state | outputs: new_outputs }, state.pointer + 2 }

      5 -> # Jump-if-true
        param1 = get_param(state, 1, Enum.at(mode_list, 0))
        param2 = get_param(state, 2, Enum.at(mode_list, 1))
        if param1 != 0 do
          {state, param2}
        else
          {state, state.pointer + 3}
        end

      6 -> # Jump-if-false
        param1 = get_param(state, 1, Enum.at(mode_list, 0))
        param2 = get_param(state, 2, Enum.at(mode_list, 1))
        if param1 == 0 do
          {state, param2}
        else
          {state, state.pointer + 3}
        end

      7 -> # Less than
        param1 = get_param(state, 1, Enum.at(mode_list, 0))
        param2 = get_param(state, 2, Enum.at(mode_list, 1))
        addr = get_write_address(state, 3, Enum.at(mode_list, 2))
        value = if param1 < param2, do: 1, else: 0
        new_memory = Map.put(state.memory, addr, value)
        { %{state | memory: new_memory }, state.pointer + 4 }

      8 -> # Equals
        param1 = get_param(state, 1, Enum.at(mode_list, 0))
        param2 = get_param(state, 2, Enum.at(mode_list, 1))
        addr = get_write_address(state, 3, Enum.at(mode_list, 2))
        value = if param1 == param2, do: 1, else: 0
        new_memory = Map.put(state.memory, addr, value)
        { %{state | memory: new_memory }, state.pointer + 4 }

      9 -> # Adjust relative base
        param1 = get_param(state, 1, Enum.at(mode_list, 0))
        new_relative_base = state.relative_base + param1
        { %{state | relative_base: new_relative_base }, state.pointer + 2 }

      _ ->
        raise "Unknown opcode: #{opcode}"
    end
  end
end

defmodule AdventOfCode do
  def part_one(input) do
    Intcode.run(input, [1])
    |> List.last()
  end
end

defmodule Solution do
  def run do
    # Read the Intcode program from 'day09-data.txt'
    input =
      "day09-data.txt"
      |> File.read!()
      |> String.trim()

    # Execute the Intcode program with input [1]
    output = AdventOfCode.part_one(input)

    # Print the BOOST keycode
    IO.puts("BOOST keycode: #{output}")
  end
end

# Automatically run the solution when executing the script
Solution.run()
```

### 3. Running the Solution

Follow these steps to execute the solution and obtain the BOOST keycode:

1. **Ensure Elixir is Installed:**

   Make sure you have Elixir installed on your system. You can verify this by running:

   ```bash
   elixir --version
   ```

   If Elixir is not installed, you can download it from [Elixir's official website](https://elixir-lang.org/install.html) or use a package manager appropriate for your operating system.

2. **Prepare the Files:**

   - **`day09-data.txt`:** Place your Intcode program in this file. Ensure it's a single line of comma-separated integers without any extra spaces or lines.

   - **`day09.exs`:** Save the provided Elixir script in this file.

   Ensure both files are in the same directory for simplicity.

3. **Execute the Script:**

   Open your terminal, navigate to the directory containing the files, and run:

   ```bash
   elixir day09.exs
   ```

   Upon execution, the program will read the Intcode from `day09-data.txt`, process it with an input value of `1`, and print the BOOST keycode. The output should look like:

   ```
   BOOST keycode: <YOUR_BOOST_KEYCODE>
   ```

   Replace `<YOUR_BOOST_KEYCODE>` with the actual numeric output produced by the Intcode program.

## Complete File Structure

Your project directory should look like this:

```
your-project-directory/
├── day09-data.txt
└── day09.exs
```

- **`day09-data.txt`:** Contains your Intcode program.
- **`day09.exs`:** Contains the Elixir solution script.

## Additional Notes

- **Error Handling:**
  - The script includes basic error handling. If the Intcode program requests an input and none is provided, it will raise an error.
  - Ensure that `day09-data.txt` contains a valid Intcode program to avoid unexpected behavior.

- **Understanding the Code:**
  - The `Intcode` module handles the execution of the Intcode program, including parsing, parameter modes, and opcode processing.
  - The `AdventOfCode` module provides a `part_one/1` function tailored for Part One of Day 9, which runs the Intcode with an input of `1` and retrieves the last output as the BOOST keycode.
  - The `Solution` module orchestrates reading the input file, executing the program, and printing the result.

- **Customization:**
  - If you wish to change the input value (from `1` to another number), modify the line `Intcode.run(input, [1])` in the `AdventOfCode` module accordingly.

## Example

Suppose your `day09-data.txt` contains the following Intcode program:

```
1102,34915192,34915192,7,4,7,99,0
```

Running `elixir day09.exs` would output:

```
BOOST keycode: 1219070632396864
```

*Note: This is just an illustrative example. Use your actual Intcode program as provided by Advent of Code.*

## Conclusion

With these adjustments, running `day09.exs` will read the Intcode program from `day09-data.txt`, execute it with the required input, and print out the BOOST keycode directly. This setup aligns with your specified file names and ensures the program behaves as expected.

Feel free to reach out if you encounter any issues or have further questions. Happy coding and good luck with Advent of Code!