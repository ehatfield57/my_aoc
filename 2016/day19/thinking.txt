
Part One:
=========

------- Odd -------
 Elf: 1  2  3  4  5
Gift: 1  1  1  1  1
   1: 2  0  2  0  3
   2: 0  0  2  0  3
   3: 0  0  5  0  0 -> Winner: 3

-------- Even --------
 Elf: 1  2  3  4  5  6
Gift: 1  1  1  1  1  1
   1: 2  0  2  0  2  0
   2: 4  0  0  0  6  0 -> Winner: 5

---------- Odd ----------
 Elf: 1  2  3  4  5  6  7
Gift: 1  1  1  1  1  1  1
   1: 2  0  2  0  2  0  3
   2: 0  0  4  0  0  0  7 -> Winner: 7

----------- Even -----------
 Elf: 1  2  3  4  5  6  7  8
Gift: 1  1  1  1  1  1  1  1
   1: 2  0  2  0  2  0  2  0
   2: 4  0  0  0  4  0  0  0
   3: 8  0  0  0  0  0  0  0 -> Winner: 1

------------- Odd -------------
 Elf: 1  2  3  4  5  6  7  8  9
Gift: 1  1  1  1  1  1  1  1  1
   1: 2  0  2  0  2  0  2  0  3
   2: 0  0  4  0  0  0  5  0  0
   3: 0  0  9  0  0  0  0  0  0 -> Winner: 3

-------------- Even --------------
 Elf: 1  2  3  4  5  6  7  8  9 10
Gift: 1  1  1  1  1  1  1  1  1  1
   1: 2  0  2  0  2  0  2  0  2  0
   2: 4  0  0  0  4  0  0  0  6  0
   3: 0  0  0  0 10  0  0  0  0  0 -> Winner: 5


  4 ->  1    5 ->   3    6 ->   5    7 ->   7
  8 ->  1    9 ->   3   10 ->   5 * 11 ->   7 * 12 ->   9   13 ->  11   14 ->  13   15 -> 15
 16 ->  1   17 ->   3   18 ->   5   19 ->   7   20 ->   9   21 ->  11   22 ->  13   23 -> 15
            24 ->  17   25 ->  19   26 ->  21   27 ->  23   28 ->  25   29 ->  27   30 -> 29
            31 ->  31
 32 ->  1   33 ->   3   34 ->   5   35 ->   7   36 ->   9   37 ->  11   38 ->  13   39 -> 15
            40 ->  17   41 ->  19   42 ->  21   43 ->  23   44 ->  25   45 ->  27   46 -> 29
            47 ->  31   48 ->  33   49 ->  35   50 ->  37   51 ->  39   52 ->  41   53 -> 43
            54 ->  45   55 ->  47   56 ->  49   57 ->  51   58 ->  53   59 ->  55   60 -> 57
            61 ->  59   62 ->  61   63 ->  63
 64 ->  1   65 ->   3   66 ->   5   67 ->   7   68 ->   9   69 ->  11   70 ->  13   71 -> 15
            72 ->  17   73 ->  19   74 ->  21   75 ->  23   76 ->  25   77 ->  27   78 -> 29
            79 ->  31   80 ->  33   81 ->  35   82 ->  37   83 ->  39   84 ->  41   85 -> 43
            86 ->  45   87 ->  47   88 ->  49   89 ->  51   90 ->  53   91 ->  55   92 -> 57
            93 ->  59   94 ->  61   95 ->  63   96 ->  65   97 ->  67   98 ->  69   99 -> 71
           100 ->  73  101 ->  75  102 ->  77  103 ->  79  104 ->  81  105 ->  83  106 -> 85
           107 ->  87  108 ->  89  109 ->  91  110 ->  93  111 ->  95  112 ->  97  113 -> 99
           114 -> 101  115 -> 103  116 -> 105  117 -> 107  118 -> 109  119 -> 111
           120 -> 113  121 -> 115  122 -> 117  123 -> 119  124 -> 121  125 -> 123
           126 -> 125  127 -> 127
128 ->  1

Puzzle Input: 3001330

2:4 3:8 4:16 5:32 6:64 7:128 8:256 9:512 10:1024 11:2048 12:4096 13:8192 14:16384 15:32768
16:65536 17:131072 18:262144 19:524288 20:1048576 * 21:2097152 * 22:4194304 *

Players:
Number of Elves -                        3001330  -  11 ->  ?
Within Exponent -  Within Exponent is 21:2097152  -   8 ->  1
Next Higher minus one -                              15 -> 15

  8   9  10  11  12  13  14  15 <- Numbers between 8 and 15 inclusive
  1   2   3   4   5   6   7   8 <- idx -> (sub1 (* 2 idx))
  1   3   5   7   9  11  13  15 <- odd <-------|

(sub1 (* 2 (add1 (- n lower-exponet))))
(sub1 (* 2 (add1 (- 11 8)))) -> (define (formo n lower) (sub1 (* 2 (add1 (- n lower)))))

:-D  (formo 3001330 2097152) -> 1808357  :-D


Part Two:
=========

Puzzle Input: 3001330

size elf halfway
   2   1       2
   3   1       2
   4   1       3
   5   1       3
   6   1       4
   7   1       4
   8   1       5
   9   1       5

Example: part-two 4 -> 4
         *
1 <- 3   1 2 3 4      ((1*. 1) (2 . 1) (3-. 1) (4 . 1))                  4
           *
2 <- 1   1 2 - 4      ((1-. 2) (2*. 1) (4 . 1))                          3
               *
4 <- 2   - 2 - 4      ((2-. 3) (4*. 1))                                  2
               !
         - - - 4      ((4 . 4))                                          1

Example: part-two 5 -> 2
           *
 1 <- 3    1 2 3 4 5  ((1*. 1) (2 . 1) (3-. 1) (4 . 1) (5 . 1))          5
             *
 2 <- 5    1 2 - 4 5  ((1 . 2) (2*. 1) (4 . 1) (5-. 1))                  4
                 *
 4 <- 1    1 2 - 4 -  ((1-. 2) (2 . 2) (4*. 1))                          3
             * 
 2 <- 4    - 2 - 4 -  ((2*. 2) (4-. 3))                                  2
             !
           - 2 - - -  ((2!. 5))                                          1

Example: part-two 6 -> 3
         *
1 <- 4   1 2 3 4 5 6  ((1*. 1) (2 . 1) (3 . 1) (4-. 1) (5 . 1) (6 . 1))  6
           *
2 <- 5   1 2 3 - 5 6  ((1 . 2) (2*. 1) (3 . 1) (5-. 1) (6 . 1))          5
             *
3 <- 1   1 2 3 - - 6  ((1-. 2) (2 . 2) (3*. 1) (6 . 1))                  4
                   *
6 <- 2   - 2 3 - - 6  ((2-. 2) (3 . 3) (6*. 1))                          3
             *
3 <- 6   - - 3 - - 6  ((3*. 3) (6-. 3))                                  2
             !
6 <- 3   - - 3 - - -  ((3 . 6))                                          1

Example: part-two 7 -> 5
         *
1 <- 4   1 2 3 4 5 6 7   7   (4)
           *
2 <- 6   1 2 3 - 5 6 7   6   (4 6)
             *
3 <- 7   1 2 3 - 5 - 7   5   (4 6 7)
                 *
5 <- 2   1 2 3 - 5 - -   4   (4 6 7 2)    EJH - Still Wrong
         *
1 <- 3   1 - 3 - 5 - -   3   (4 6 7 2 3)
                 *
5 <- 1   1 - - - 5 - -   2   (4 6 7 2 3 1)
                 !
         - - - - 5 - -   1


Trying to fine tune the algorithm:
==================================
(half             (halfway (length data)))
(zero-base-half   (sub1 half))
(zero-base-offset (sub1 offset))

(remove to-remove data) (define offset 1)
(remove (list-ref data modulo-idx) data)                                                              (add1 offset)
(remove (list-ref data (modulo (+ zero-base-half zero-base-offset) (length data))) data)              (add1 offset)
(remove (list-ref data (modulo (+ (sub1 (halfway (length data))) (sub1 offset)) (length data))) data) (add1 offset)

(define data '(1 2 3 4 5))
(remove (list-ref data (modulo (+ (sub1 (halfway (length data))) (sub1 offset)) (length data))) data) (add1 offset)
                                                 ----- 5 -----   ----- 0 -----  ----- 5 -----         ----- 1 -----
                                        -------------- 3 ------  ----- 0 -----  ----- 5 -----         ----- 1 -----
                                  -------------------- 2 ------- ----- 0 -----  ----- 5 -----         ----- 1 -----
                               ----------------------- 2 ---------------------- ----- 5 -----         ----- 1 -----
                       ------------------------------- 2 --------- ---------------------------        ----- 1 -----
        ---------------------------------------------- 3 --------------------------------------       ----- 1 -----
-------------------------------------------------- (1 2 4 5) ---------------------------------------- ----- 1 -----

(define data '(1 2 4 5)) (define offset 2)
(remove (list-ref data (modulo (+ (sub1 (halfway (length data))) (sub1 offset)) (length data))) data) (add1 offset)
                                                 ----- 4 -----   ----- 1 -----  ------ 4 ----         ------ 2 ----
                                        -------------- 2 ------  ----- 1 -----  ------ 4 -----        ------ 2 ----
                                  -------------------- 1 ------- ----- 1 -----  ------ 4 -----        ------ 2 ----
                               ----------------------- 2 ---------------------  ------ 4 -----        ------ 2 ----
                       ------------------------------- 2 -------------------------------------        ------ 2 ----
        ---------------------------------------------- ? -- (5) -------------------------------       ------ 2 ----
--------------------------------------------------- (1 2 4) ----------------------------------------- ------ 2 ----


(define data '(...)) (define offset ?)
(remove (list-ref data (modulo (+ (sub1 (halfway (length data))) (sub1 offset)) (length data))) data) (add1 offset)
                                                 ----- ? -----   ----- ? -----  ------ ? ----         ------ ? ----
                                        -------------- ? ------  ----- ? -----  ------ ? -----        ------ ? ----
                                  -------------------- ? ------- ----- ? -----  ------ ? -----        ------ ? ----
                               ----------------------- ? ---------------------  ------ ? -----        ------ ? ----
                       ------------------------------- ? -------------------------------------        ------ ? ----
        ---------------------------------------------- ? ------ -------------------------------       ------ ? ----
--------------------------------------------------- ( ... ) ----------------------------------------- ------ ? ----

